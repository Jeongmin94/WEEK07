11.6
A. Modify Tiny so that it echoes every request line and request header.

B. Use your favoirte browser to make a request to Tiny for static content. Capture the output from Tiny to determine the version of HTTP your browser uses.

GET / HTTP/1.1
Host: localhost
Connection: keep-alive
Cache-Control: max-age=0
Upgrade-Insecure-Requests: 1
User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
Sec-Fetch-Site: none
Sec-Fetch-Mode: navigate
Sec-Fetch-User: ?1
Sec-Fetch-Dest: document
Accept-Encoding: gzip, deflate, br
Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

C. Inspect the output from Tiny to determine the version of HTTP your browser uses.
    HTTP 1.1

D. Consult the HTTP/1.1 standard in RFC 2616 to determine the meaning of each header in the HTTP request from your browser. You can obtain RFC 2616 from www.rfc-editor.org/rfc.html.
    https://developer.mozilla.org/ko/docs/Web/HTTP/Headers
    https://muang-kim.tistory.com/276

    GET / HTTP/1.1
    Host: localhost
    Connection: keep-alive
    Upgrade-Insecure-Requests: 1
    User-Agent: Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/88.0.4324.104 Safari/537.36
    Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9
    Sec-Fetch-Site: none
    Sec-Fetch-Mode: navigate
    Sec-Fetch-User: ?1
    Sec-Fetch-Dest: document
    Accept-Encoding: gzip, deflate, br
    Accept-Language: ko-KR,ko;q=0.9,en-US;q=0.8,en;q=0.7

    Age : 객체가 프록시 캐시 내에 머무는 초단위의 시간. 0이라면 막 내려받은 상태

    Accept - 클라이언트가 요청을 보낼 때, 데이터의 원하는 타입을 명시해준다. Accept : text/html이라는 요청이 들어오면 HTML 형식의 응답을 처리하겠다는 의미이다. 서버는 Accept 헤더에 담긴 내용을 보고 Content 헤더의 내용을 알맞게 설정해서 응답을 보낸다.

    User-Agent - 현재 사용자가 어떤 클라이언트를 이용해 요청을 보냈는지 보여준다.

    Cookie & Cache - 캐시를 이용하면 똑같은 데이터를 계속해서 내려받을 필요가 없게 된다. 쿠키는 클라이언트와 서버 간의 데이터를 주고받는 가장 간단한 방법 중 하나이다. HTTP 헤더를 통해 이해할 수 있다.

    Cache - 개인 캐시를 의미한다. 우리 브라우저에 응답으로 도착한 HTML이나 JSON같은 데이터가 저장되어 나중에 서버에 따로 요청하지 않아도 브라우저에 저장된 응답을 사용할 수 있다. 보통 캐싱은 GET 요청에만 하는데, 가져온 데이터를 저장해놓고 두고두고 사용한다. 캐싱이 성공하면 200, 다른 주소로 이동하여 가져오면 301, 가져올게 없으면 404 상태코드로 응답에 대해 캐싱할 수 있다. Cache-Control을 이용해서 캐시를 설정할 수 있다.

        Age - 캐시 응답에서 나타나는데, max-age 시간 내에서 얼마나 흘렀는지 초 단위로 알려준다. max-age=3600일 경우 1시간 후에 캐시는 만료된다.

        Expires - Cache-Control과 별개로 응답에 Expires라는 헤더를 줄 수 있다. 응답 콘텐츠가 언제 만료되는지 나타내며, max-age가 세팅되어 있다면 Expires는 무시된다.

    Cookie - 브라우저에 저장되는 작은 데이터 조각이다. 임시 데이터 보관 혹은 웹페이지 개인화 등에 사용된다. 쿠키를 주기적으로 지우지 않으면 브라우저에 많은 쿠키들이 쌓여있는데, 이것들이 우리를 추적하고 있다.

11.7
Extend Tiny so that it serves MPG video files. Check your work using a real browser.
    -> 재생은 못 시킴. 정상 로드 및 다운로드는 가능

11.9
Modify Tiny so that when it serves static content, it copies the requested file to the connected descriptor using malloc, rio_readn, and rio_writen, instead of mmap and rio_writen.
    -> srcp에 복사할 파일 사이즈만큼 malloc을 시켜줌
    -> rio_readn을 해서 srcfd를 srcp에 복사함
    -> rio_writen을 해서 sockfd에 저장함
    -> srcp를 해제함

11.10
A. Write an HTML form for the CGI adder function in Figure 11.27. Your form should include two text boxes that users fill in with the two numbers to be added together. Your form should request content using the GET method.

B. Check your work by using a real browser to request the form from Tiny, submit the filled-in form to Tiny, and then display the dynamic content generated by adder.


11.11
Extend Tiny to support the HTTP HEAD method. Check your work using TELNET as a Web client